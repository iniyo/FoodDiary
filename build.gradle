buildscript {
    ext {
        queryDslVersion = "5.1.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.12'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.service'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springModulithVersion', "1.2.4")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // implementation 'org.springframework.boot:spring-boot-starter-security'
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.modulith:spring-modulith-events-api'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.google.firebase:firebase-admin:9.4.2' // firebase
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2' // Springdoc OpenAPI (Swagger)

    // QueryDSL dependencies
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    //Jwt
//    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
//    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.springframework.modulith:spring-modulith-events-kafka'
    annotationProcessor 'org.projectlombok:lombok'

    /**
     * test
     */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

/**
 * query dsl
 */

// QueryDSL 경로 설정
def querydslDir = layout.buildDirectory.dir("src/main/generated").get().asFile

sourceSets {
    main {
        java {
            srcDirs += querydslDir // 생성된 QueryDSL 파일을 소스 경로에 추가
        }
    }
}

clean {
    delete querydslDir
}

/**
 * query dsl
 */

tasks.named('test') {
    useJUnitPlatform()
}
